commit 705880f0045ac39140f980d69aec68869213e379
Author: Alexis Menard <alexis.menard@nokia.com>
Date:   Thu Nov 26 13:47:34 2009 +0100

    Fix a crash in KDE/Plasma with QGraphicsView. TopLevel list of items
    was corrupted.
    
    This nasty bug was triggered when the index sort the top level list of
    items. We forgot to set the flag topLevelSequentialOrdering to false
    so when an item was removed from the top level list it was using the
    sibling index which can be not valid anymore since the list is not
    sorted by sequential order. So it let some dangling pointers in the
    list which make processDirtyItemRecursive crash the next paint event.
    
    Reviewed-by:bnilsen
    Reviewed-by:andreas

diff --git a/src/gui/graphicsview/qgraphicsscene_p.h b/src/gui/graphicsview/qgraphicsscene_p.h
index a1d0496..69e4d5b 100644
--- a/src/gui/graphicsview/qgraphicsscene_p.h
+++ b/src/gui/graphicsview/qgraphicsscene_p.h
@@ -78,7 +78,7 @@ class QGraphicsSceneIndex;
 class QGraphicsView;
 class QGraphicsWidget;
 
-class QGraphicsScenePrivate : public QObjectPrivate
+class Q_AUTOTEST_EXPORT QGraphicsScenePrivate : public QObjectPrivate
 {
     Q_DECLARE_PUBLIC(QGraphicsScene)
 public:
@@ -265,6 +265,7 @@ public:
     {
         if (needSortTopLevelItems) {
             qSort(topLevelItems.begin(), topLevelItems.end(), qt_notclosestLeaf);
+            topLevelSequentialOrdering = false;
             needSortTopLevelItems = false;
         }
     }

commit f708b248aec810a1dcad1f13e1c16390244c9834
Author: Trond Kjernåsen <trond@trolltech.com>
Date:   Fri Dec 18 17:48:10 2009 +0100

    Fixed QPixmap::load() to not modify referenced copies.
    
    This is a bad regression from 4.5. QPixmap::load() would modify all
    references to the same QPixmap object.
    
    Task-number: QTBUG-6840
    Reviewed-by: Kim

diff --git a/src/gui/image/qpixmap.cpp b/src/gui/image/qpixmap.cpp
index 617cfe5..7e4597e 100644
--- a/src/gui/image/qpixmap.cpp
+++ b/src/gui/image/qpixmap.cpp
@@ -831,14 +831,13 @@ bool QPixmap::load(const QString &fileName, const char *format, Qt::ImageConvers
     if (QPixmapCache::find(key, *this))
         return true;
 
-    if (!data)
-        data = QPixmapData::create(0, 0, QPixmapData::PixmapType);
-
-    if (data->fromFile(fileName, format, flags)) {
+    QPixmapData *tmp = QPixmapData::create(0, 0, QPixmapData::PixmapType);
+    if (tmp->fromFile(fileName, format, flags)) {
+        data = tmp;
         QPixmapCache::insert(key, *this);
         return true;
     }
-
+    delete tmp;
     return false;
 }
 
commit 0fa878c4d2dfc25d4641a6654a9b482230559c3a
Author: Kim Motoyoshi Kalland <kim.kalland@nokia.com>
Date:   Mon Nov 30 13:13:11 2009 +0100

    Fixed square root of negative number in drawTextItem().
    
    Fixed potential bug where you could end up taking the square root of a
    negative number in drawTextItem() in the raster and OpenGL paint
    engines.
    
    Task-number: QTBUG-6327
    Reviewed-by: Trond

diff --git a/src/gui/painting/qpaintengine_raster.cpp b/src/gui/painting/qpaintengine_raster.cpp
index 3f33319..4a72434 100644
--- a/src/gui/painting/qpaintengine_raster.cpp
+++ b/src/gui/painting/qpaintengine_raster.cpp
@@ -3240,7 +3240,8 @@ void QRasterPaintEngine::drawTextItem(const QPointF &p, const QTextItem &textIte
         drawCached = false;
 
     // don't try to cache huge fonts
-    if (ti.fontEngine->fontDef.pixelSize * qSqrt(s->matrix.determinant()) >= 64)
+    const qreal pixelSize = ti.fontEngine->fontDef.pixelSize;
+    if (pixelSize * pixelSize * qAbs(s->matrix.determinant()) >= 64 * 64)
         drawCached = false;
 
     // ### Remove the TestFontEngine and Box engine crap, in these
diff --git a/src/opengl/gl2paintengineex/qpaintengineex_opengl2.cpp b/src/opengl/gl2paintengineex/qpaintengineex_opengl2.cpp
index 07432c6..15702ba 100644
--- a/src/opengl/gl2paintengineex/qpaintengineex_opengl2.cpp
+++ b/src/opengl/gl2paintengineex/qpaintengineex_opengl2.cpp
@@ -1452,7 +1452,8 @@ void QGL2PaintEngineEx::drawTextItem(const QPointF &p, const QTextItem &textItem
         drawCached = false;
 
     // don't try to cache huge fonts
-    if (ti.fontEngine->fontDef.pixelSize * qSqrt(s->matrix.determinant()) >= 64)
+    const qreal pixelSize = ti.fontEngine->fontDef.pixelSize;
+    if (pixelSize * pixelSize * qAbs(s->matrix.determinant()) >= 64 * 64)
         drawCached = false;
 
     QFontEngineGlyphCache::Type glyphType = ti.fontEngine->glyphFormat >= 0
commit dbaea6fa5a90742d89691685baa44a1a34598f21
Author: Trond Kjernåsen <trond@trolltech.com>
Date:   Mon Nov 16 10:42:35 2009 +0100

    Fixed a crash in QPixmap::fromImage() when passing in a null image.
    
    Task-number: QTBUG-5840
    Reviewed-by: Kim

diff --git a/src/gui/image/qpixmap_x11.cpp b/src/gui/image/qpixmap_x11.cpp
index 3f297df..7008fbd 100644
--- a/src/gui/image/qpixmap_x11.cpp
+++ b/src/gui/image/qpixmap_x11.cpp
@@ -416,6 +416,11 @@ void QX11PixmapData::fromImage(const QImage &img,
     d = img.depth();
     is_null = (w <= 0 || h <= 0);
 
+    if (is_null) {
+        w = h = 0;
+        return;
+    }
+
     if (defaultScreen >= 0 && defaultScreen != xinfo.screen()) {
         QX11InfoData* xd = xinfo.getX11Data(true);
         xd->screen = defaultScreen;
commit 05eacd9ad40f8adb5aaa12a8b90113a73b43f642
Author: Jouni Hiltunen <jouni.hiltunen@digia.com>
Date:   Tue Nov 3 13:50:49 2009 +0200

    Long-press shortcuts for symbols on QWERTY keyboard don't work
    
    Qt key event was not handled properly in the case of long key press.
    With long key press, QCoeFepInputContext::commitCurrentString gets
    called 3 times("q", "", "1"). (Normal key press is causing one call).
    
    This is how aknfep works, so commitCurrentString was modified
    to replace first character if long key press event detected.
    E.g. "q" is replaced with "1".
    
    qlinecontrol modified to keep cursor position correct.
    
    Signed-off-by: axis <qt-info@nokia.com>

diff --git a/src/gui/inputmethod/qcoefepinputcontext_p.h b/src/gui/inputmethod/qcoefepinputcontext_p.h
index 452aa75..28c1c67 100644
--- a/src/gui/inputmethod/qcoefepinputcontext_p.h
+++ b/src/gui/inputmethod/qcoefepinputcontext_p.h
@@ -146,6 +146,8 @@ private:
     int m_inlinePosition;
     MFepInlineTextFormatRetriever *m_formatRetriever;
     MFepPointerEventHandlerDuringInlineEdit *m_pointerHandler;
+    int m_longPress;
+    int m_cursorPos;
 };
 
 QT_END_NAMESPACE
diff --git a/src/gui/inputmethod/qcoefepinputcontext_s60.cpp b/src/gui/inputmethod/qcoefepinputcontext_s60.cpp
index ea5e29b..ceace4a 100644
--- a/src/gui/inputmethod/qcoefepinputcontext_s60.cpp
+++ b/src/gui/inputmethod/qcoefepinputcontext_s60.cpp
@@ -71,7 +71,9 @@ QCoeFepInputContext::QCoeFepInputContext(QObject *parent)
       m_cursorVisibility(1),
       m_inlinePosition(0),
       m_formatRetriever(0),
-      m_pointerHandler(0)
+      m_pointerHandler(0),
+      m_longPress(0),
+      m_cursorPos(0)
 {
     m_fepState->SetObjectProvider(this);
     m_fepState->SetFlags(EAknEditorFlagDefault);
@@ -488,6 +490,8 @@ void QCoeFepInputContext::StartFepInlineEditL(const TDesC& aInitialInlineText,
 
     m_isEditing = true;
 
+    m_cursorPos = w->inputMethodQuery(Qt::ImCursorPosition).toInt();
+    
     QList<QInputMethodEvent::Attribute> attributes;
 
     m_cursorVisibility = aCursorVisibility ? 1 : 0;
@@ -691,15 +695,22 @@ void QCoeFepInputContext::DoCommitFepInlineEditL()
 void QCoeFepInputContext::commitCurrentString(bool triggeredBySymbian)
 {
     if (m_preeditString.size() == 0) {
+		QWidget *w = focusWidget();
+		if(triggeredBySymbian && w){
+			// We must replace the last character only if the input box has already accepted one 
+			if (w->inputMethodQuery(Qt::ImCursorPosition).toInt() != m_cursorPos)
+				m_longPress = 1;
+		}
         return;
     }
 
     QList<QInputMethodEvent::Attribute> attributes;
     QInputMethodEvent event(QLatin1String(""), attributes);
-    event.setCommitString(m_preeditString, 0, 0);//m_preeditString.size());
+    event.setCommitString(m_preeditString, 0-m_longPress, m_longPress);
     m_preeditString.clear();
     sendEvent(event);
 
+    m_longPress = 0;
     m_isEditing = false;
 
     if (!triggeredBySymbian) {
diff --git a/src/gui/widgets/qlinecontrol.cpp b/src/gui/widgets/qlinecontrol.cpp
index 2914164..300a2ea 100644
--- a/src/gui/widgets/qlinecontrol.cpp
+++ b/src/gui/widgets/qlinecontrol.cpp
@@ -414,7 +414,7 @@ void QLineControl::processInputMethodEvent(QInputMethodEvent *event)
 
 
     int c = m_cursor; // cursor position after insertion of commit string
-    if (event->replacementStart() <= 0)
+    if (event->replacementStart() == 0)
         c += event->commitString().length() + qMin(-event->replacementStart(), event->replacementLength());
 
     m_cursor += event->replacementStart();
